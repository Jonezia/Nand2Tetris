// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */
class Memory {

    /** ram = array for indexing ram locations, list = pointer to start
    of linked list, curr = current node of linked list, node[0] = address
    of next node, node[1] = segment size **/
    static Array ram, list, curr;

    /** Initializes the class. */
    function void init() {
        var int heapBase, heapNext, heapSize;

        let ram = 0;
        let heapBase = 2048;
        let heapNext = 0;
        let heapSize = 14335;

        let list = heapBase;
        let list[0] = null;
        let list[1] = heapSize;

        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        let curr = list;
        while (curr[1] < size) {
            if (curr[0] = null) {
                return null;
            } else {
                let curr = curr[0];
            }
        }
        if (curr[1] > size + 2) {
            /** if there's enough space, create another segment **/
            let curr[0] = curr + size + 2;
            let curr[size + 2] = curr[0];
            let curr[size + 3] = curr[1] - size - 2;
        }
        let curr[1] = 0;
        return curr + 2;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        /** We can do this because the list is always linear (segments point
        to segments directly after them in memory) **/
        let o[-1] = o[-2] - o;
        return;
    }
}
